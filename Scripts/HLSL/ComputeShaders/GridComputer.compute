#pragma kernel ComputeGrid

struct GridElement {
    float3 Position;
    float Proximity;
};

RWStructuredBuffer<GridElement> GridElements;
//float Speed;
float DeltaTime;
float Time;
float4 Spheres[500];
int SphereCount;
float InnerRadHeight;
float Radius;



[numthreads(128, 1, 1)]
void ComputeGrid(uint3 id : SV_DispatchThreadID)
{
    GridElement element = GridElements[id.x];
    float3 pos = element.Position;

    float TargetPosDefault = -10+3 * sin(element.Position.x / 7 + Time / 2 + element.Position.z / 7) + 2*sin(element.Position.z / 2 + Time / 2) + cos(element.Position.x / 2 + Time / 2) +1.5* cos(id.x / 4 + Time / 3);
    float TargetPosProximity=0;
  
    float Dist = 5555;
    float Prox = 0;

    for (int i = 0; i < SphereCount; i++)
    {
        float d = length(element.Position.xz - Spheres[i].xz);
        if (d < Radius * Spheres[i].w*2 && d < Dist)
        {
            Dist = d;
            TargetPosProximity = (d> Radius* Spheres[i].w )? (1 - (d- Radius * Spheres[i].w) / (Radius * Spheres[i].w))* InnerRadHeight :InnerRadHeight;
            Prox = clamp( (1 - Dist / (Radius * Spheres[i].w * 2))*(1 - Dist / (Radius * Spheres[i].w * 2)),0,1);
        }    
    }

    pos.y +=(Dist<555)? (TargetPosProximity-pos.y)*DeltaTime*6: (TargetPosDefault - pos.y) * DeltaTime * 1.5;
    element.Position = pos;
    element.Proximity = Prox;
    GridElements[id.x] = element;
}

 